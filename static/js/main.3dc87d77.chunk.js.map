{"version":3,"sources":["components/qiuz/quizQuestion.js","components/qiuz/quizAnswers.js","components/qiuz/resultsModal.js","shared/constants.js","entities/Question.js","services/getQuestions.js","helpers/mixArrayElements.js","state/actions/quizActions.js","state/actions/types.js","components/qiuz/quiz.js","components/admin/TextArea.js","components/admin/SendButton.js","services/postQuestion.js","components/admin/Admin.js","state/actions/adminActions.js","App.js","serviceWorker.js","state/reducers/quizReducer.js","state/reducers/adminReducer.js","state/reducers/rootReducer.js","state/store.js","index.js"],"names":["quizQuestion","_ref","questionText","questionCode","questionNumber","questionsCount","react_default","a","createElement","react","className","concat","split","map","line","index","key","quizAnswers","isAnswerCorrect","onButtonClick","onAnswerClick","answers","answerGiven","role","buttonList","answer","disabled","answerStatus","isCorrect","onClick","event","text","resultsModal","score","numOfQuestions","show","resetBtnHandler","endpoint","Question","Object","classCallCheck","this","fetchAllQuestions","fetch","then","response","json","item","randomizedAnswers","arr","i","length","randomIndex","Math","floor","random","temp","mixArrayElements","catch","err","console","error","valueOfAnswerAction","value","type","payload","Quiz","answerIsCorrect","_this","props","setValueOfAnswer","increaseCorrectAnswerCount","nextQuestionHandler","questions","nextQuestion","changeShowResults","resetQuiz","resetState","getQuestions","_this$props","correctAnswersCount","showResults","Component","connect","state","quiz","getQuestionsErr","dispatch","TextArea","onChangeHandler","name","class","onChange","aria-label","SendButton","onClickHandler","postQuestion","content","method","headers","Content-Type","body","Admin","sendQuestionToServer","preventDefault","correctAnswer","incorrectAnswer1","incorrectAnswer2","question","JSON","stringify","resetForm","_this$props2","fieldArr","field","handler","changeQuestionText","changeQuestionCode","changeCorrectAnswer","changeIncorrectAnswer1","changeIncorrectAnswer2","log","admin","target","App","Switch","Route","path","component","Boolean","window","location","hostname","match","quizInitState","adminStartState","adminReducer","arguments","undefined","action","objectSpread","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dc87d77.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nexport default ({questionText, questionCode, questionNumber, questionsCount}) => (\r\n    \r\n    <Fragment>\r\n      <div className=\"questions-wrap\">\r\n        <h1>Question {`${questionNumber + 1} / ${questionsCount}`}</h1>\r\n        <p className=\"lead\">{questionText}</p>\r\n        <div className=\"code-wrap alert alert-light\">\r\n          {questionCode.split(\"\\n\").map((line, index) => <div key={index} className='code-line'>{line}</div>)}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n\r\n  );\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default ({isAnswerCorrect, onButtonClick, onAnswerClick, answers}) => {\r\n\r\n  const answerGiven = \r\n  isAnswerCorrect === 'correct' \r\n  ? <div className=\"alert alert-success\" role=\"alert\">Answer is CORRECT</div> \r\n  : <div className=\"alert alert-danger\" role=\"alert\">Answer is NOT CORRECT</div>\r\n\r\n  const buttonClass = \r\n  answerStatus => `answer-option ${ answerStatus && isAnswerCorrect \r\n    ?  \"btn btn-outline-success\" \r\n    :\"btn btn-outline-secondary\"} `\r\n  \r\n  const buttonList = answers.map((answer, index) => ( \r\n  <li key={index}>\r\n  <button \r\n  disabled={isAnswerCorrect} \r\n  className= {buttonClass(answer.isCorrect)} \r\n  onClick={event => onAnswerClick(answer.isCorrect)}>{answer.text}\r\n  </button>\r\n  </li>\r\n  ))\r\n  \r\n  return(\r\n    <Fragment>\r\n    {isAnswerCorrect ? answerGiven : null}\r\n    <ul>\r\n      {buttonList} \r\n    </ul>\r\n    <button onClick={onButtonClick} className=\"btn btn-info\" disabled={!isAnswerCorrect}>NEXT QUESTION</button>\r\n    </Fragment>\r\n  )\r\n};","import React from 'react';\r\n\r\nexport default ({score, numOfQuestions, show, resetBtnHandler}) => (\r\n  show ?\r\n  <div className='modal'>\r\n    <div className='modal-score'>Your Score is: {score} out of {numOfQuestions} questions</div>\r\n    <button onClick={resetBtnHandler} className=\"another-one btn btn-info\">Play Another One</button>\r\n  </div>\r\n  :\r\n  null\r\n)","export const endpoint = 'https://lit-woodland-22181.herokuapp.com/api/questions/random';","class Question {\r\n  constructor(questionText, questionCode, answers){\r\n    this.questionText = questionText;\r\n    this.questionCode = questionCode;\r\n    this.answers = answers;\r\n  }\r\n}\r\n\r\nexport default Question;","import { endpoint } from '../shared/constants';\r\nimport Question from '../entities/Question';\r\nimport mixArrayElements from '../helpers/mixArrayElements';\r\n\r\nexport const fetchAllQuestions = () => {\r\n  return fetch(endpoint)\r\n  .then(response => response.json())\r\n  .then(response => response.map(item => { \r\n    const {questionText, questionCode, answers} = item;\r\n    const randomizedAnswers = mixArrayElements(answers);\r\n    return new Question(questionText, questionCode, randomizedAnswers)\r\n  }))\r\n  .catch(err => console.error('ERROR:', err))\r\n}","export default (arr) => {\r\n  let arrLen = arr.length;\r\n  for (let i = arrLen - 1; i >= 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n\r\n  return arr;\r\n}\r\n","import { fetchAllQuestions } from '../../services/getQuestions';\r\nimport { GET_QUESTIONS, GET_QUESTIONS_ERROR, SET_ANSWER_VALUE, INCREASE_CORRECT_COUNT, INCREASE_QUESTION_NUMBER, SHOW_RESULTS, RESET_QUIZ} from './types';\r\n\r\nexport const getAllQuestionsAction = () => {\r\n  return (dispatch) => {\r\n    fetchAllQuestions()\r\n    .then( questions => {\r\n      dispatch({type: GET_QUESTIONS, payload: questions})\r\n    })\r\n    .catch( err => {\r\n      dispatch({type: GET_QUESTIONS_ERROR, error: err})\r\n    })\r\n  }\r\n}\r\n\r\nexport const valueOfAnswerAction = (value) => {\r\n  return {\r\n    type: SET_ANSWER_VALUE,\r\n    payload: value\r\n  }\r\n}\r\n\r\nexport const increaseCorrectCountAction = () => {\r\n  return {\r\n    type: INCREASE_CORRECT_COUNT,\r\n  }\r\n}\r\n\r\nexport const increaseQuestionNumberAction = () => {\r\n  return {\r\n    type: INCREASE_QUESTION_NUMBER,\r\n  }\r\n}\r\n\r\nexport const showResultsAction = () => {\r\n  return {\r\n    type: SHOW_RESULTS,\r\n    payload: true\r\n  }\r\n}\r\n\r\nexport const resetQuizAction = () => {\r\n  return {\r\n    type: RESET_QUIZ,\r\n  }\r\n}","export const CHANGE_QUESTION_TEXT_VALUE = 'CHANGE_QUESTION_TEXT_VALUE';\r\nexport const CHANGE_QUESTION_CODE_VALUE = 'CHANGE_QUESTION_CODE_VALUE';\r\nexport const CHANGE_CORRECT_ANSWER_VALUE = 'CHANGE_CORRECT_ANSWER_VALUE';\r\nexport const CHANGE_INCORRECT_ANSWER1_VALUE = 'CHANGE_INCORRECT_ANSWER1_VALUE';\r\nexport const CHANGE_INCORRECT_ANSWER2_VALUE = 'CHANGE_INCORRECT_ANSWER2_VALUE';\r\nexport const RESET_FORM = 'RESET_FORM';\r\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\r\nexport const GET_QUESTIONS_ERROR = 'GET_QUESTIONS_ERROR';\r\nexport const SET_ANSWER_VALUE = 'SET_ANSWER_VALUE';\r\nexport const INCREASE_CORRECT_COUNT = 'INCREASE_CORRECT_COUNT';\r\nexport const INCREASE_QUESTION_NUMBER = 'INCREASE_QUESTION_NUMBER';\r\nexport const SHOW_RESULTS = 'SHOW_RESULTS';\r\nexport const RESET_QUIZ = 'RESET_QUIZ';\r\n","import React from 'react';\r\nimport { Component, Fragment } from 'react';\r\nimport QuizQuestion from './quizQuestion'\r\nimport QuizAnswer from './quizAnswers';\r\nimport ResultsModal from './resultsModal';\r\nimport { resetQuizAction, getAllQuestionsAction, valueOfAnswerAction, increaseCorrectCountAction, increaseQuestionNumberAction, showResultsAction } from '../../state/actions/quizActions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Quiz extends Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.getQuestions();\r\n  }\r\n\r\n  onAnswerClick = answerIsCorrect => {\r\n    if(answerIsCorrect) {\r\n      this.props.setValueOfAnswer('correct');\r\n      this.props.increaseCorrectAnswerCount();\r\n    } else {\r\n      this.props.setValueOfAnswer('incorrect');\r\n    }\r\n  }\r\n\r\n  nextQuestionHandler = () => {\r\n    if(this.props.questionNumber < this.props.questions.length-1) {\r\n      this.props.nextQuestion();\r\n    } else {\r\n      this.props.changeShowResults();\r\n    }\r\n  }\r\n\r\n  resetQuiz = () => {\r\n    this.props.resetState();\r\n    this.props.getQuestions();\r\n  }\r\n\r\n  render(){\r\n    const { questions, isAnswerCorrect, questionNumber, correctAnswersCount, showResults } = this.props;\r\n    return(\r\n      <Fragment>\r\n        <ResultsModal resetBtnHandler={this.resetQuiz} score={correctAnswersCount} numOfQuestions={questions.length} show={showResults}/>\r\n        <QuizQuestion \r\n        questionText={questions.length > 0? questions[questionNumber].questionText : \"\"}\r\n        questionCode= {questions.length > 0? questions[questionNumber].questionCode : \"\"}\r\n        questionNumber = {questionNumber}\r\n        questionsCount = {questions.length}\r\n        />\r\n        <QuizAnswer \r\n        onButtonClick={this.nextQuestionHandler}\r\n        answers={questions.length > 0 ? questions[questionNumber].answers: []}\r\n        onAnswerClick = {this.onAnswerClick}\r\n        isAnswerCorrect = {isAnswerCorrect}\r\n        questionNumber = {questionNumber}\r\n        />\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    questions: state.quiz.questions,\r\n    getQuestionsErr: state.quiz.getQuestionsErr,\r\n    isAnswerCorrect: state.quiz.isAnswerCorrect,\r\n    correctAnswersCount: state.quiz.correctAnswersCount,\r\n    questionNumber: state.quiz.questionNumber,\r\n    showResults: state.quiz.showResults\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getQuestions: () => { dispatch( getAllQuestionsAction() ) },\r\n    setValueOfAnswer: value => { dispatch( valueOfAnswerAction(value) ) },\r\n    increaseCorrectAnswerCount: () => { dispatch( increaseCorrectCountAction() ) },\r\n    nextQuestion: () => { dispatch( increaseQuestionNumberAction() ); dispatch( valueOfAnswerAction('') ) },\r\n    changeShowResults: () => { dispatch( showResultsAction() ) },\r\n    resetState: () => { dispatch( resetQuizAction() ) }\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React from 'react';\r\n\r\nexport default ({onChangeHandler, name, value}) => (\r\n  <div class=\"input-group\">\r\n    <div class=\"input-group-prepend\">\r\n      <span class=\"input-group-text\">{name}</span>\r\n    </div>\r\n    <textarea onChange={onChangeHandler} value={value} class=\"form-control\" aria-label=\"With textarea\"></textarea>\r\n  </div>\r\n)\r\n","import React from 'react';\r\n\r\nexport default ({onClickHandler}) => <button onClick={onClickHandler} className='btn btn-primary'>SEND</button>\r\n  ","import { endpoint } from '../shared/constants';\r\n\r\nexport const postQuestion = content => {\r\n  return fetch(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: content\r\n  })\r\n  .then(response => response.json())\r\n  .catch(err => console.error('ERROR:', err))\r\n}","import React, { Component } from 'react';\r\nimport TextArea from './TextArea';\r\nimport { connect } from 'react-redux';\r\nimport { questionTextAction, questionCodeAction, correctAnswerAction, incorrectAnswer1Action, incorrectAnswer2Action, resetFormAction } from '../../state/actions/adminActions';\r\nimport SendButton from './SendButton';\r\nimport Question from '../../entities/Question';\r\nimport { postQuestion } from '../../services/postQuestion';\r\n\r\nclass Admin extends Component {\r\n\r\n  sendQuestionToServer = event => {\r\n    event.preventDefault();\r\n    const { questionText, questionCode, correctAnswer, incorrectAnswer1, incorrectAnswer2} = this.props;\r\n    if(!questionText || !correctAnswer || !incorrectAnswer1 || !incorrectAnswer2) {\r\n      return\r\n    }\r\n    const answers = [\r\n      {text: correctAnswer, isCorrect: true},\r\n      {text: incorrectAnswer1, isCorrect: false},\r\n      {text: incorrectAnswer2, isCorrect: false}\r\n    ]\r\n    const question = new Question(questionText, questionCode, answers);\r\n    postQuestion(JSON.stringify(question));\r\n    this.props.resetForm();\r\n  }\r\n\r\n  render() {\r\n    const { questionText, questionCode, correctAnswer, incorrectAnswer1, incorrectAnswer2, changeQuestionText, changeQuestionCode, changeCorrectAnswer, changeIncorrectAnswer1, changeIncorrectAnswer2 } = this.props;\r\n    const fieldArr = [\r\n      {field: questionText, handler: changeQuestionText }, \r\n      {field: questionCode, handler: changeQuestionCode}, \r\n      {field: correctAnswer, handler: changeCorrectAnswer}, \r\n      {field: incorrectAnswer1, handler: changeIncorrectAnswer1}, \r\n      {field: incorrectAnswer2, handler: changeIncorrectAnswer2}\r\n    ];\r\n    console.log('from admin:', this.props)\r\n    return(\r\n      <div className=\"container\">\r\n        <form>\r\n          {fieldArr.map( item =>  <TextArea onChangeHandler={item.handler} name={item.field.name} value={item.field.value}/> )}\r\n          <SendButton onClickHandler={this.sendQuestionToServer}/>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    questionText: state.admin.questionText, \r\n    questionCode: state.admin.questionCode,\r\n    correctAnswer: state.admin.correctAnswer,\r\n    incorrectAnswer1: state.admin.incorrectAnswer1,\r\n    incorrectAnswer2: state.admin.incorrectAnswer2,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeQuestionText: event => { dispatch( questionTextAction(event.target.value) ) },\r\n    changeQuestionCode: event => { dispatch( questionCodeAction(event.target.value) ) },\r\n    changeCorrectAnswer: event => { dispatch( correctAnswerAction(event.target.value) ) },\r\n    changeIncorrectAnswer1: event => { dispatch( incorrectAnswer1Action(event.target.value) ) },\r\n    changeIncorrectAnswer2: event => { dispatch( incorrectAnswer2Action(event.target.value) ) },\r\n    resetForm: () => { dispatch( resetFormAction() ) }\r\n    \r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);","import { CHANGE_QUESTION_CODE_VALUE, CHANGE_CORRECT_ANSWER_VALUE, CHANGE_INCORRECT_ANSWER1_VALUE, CHANGE_INCORRECT_ANSWER2_VALUE, RESET_FORM, CHANGE_QUESTION_TEXT_VALUE } from './types';\r\n\r\nexport const questionTextAction = (val) => {\r\n  return {\r\n    type: CHANGE_QUESTION_TEXT_VALUE,\r\n    payload: val\r\n  }\r\n}\r\n\r\nexport const questionCodeAction = (val) => {\r\n  return {\r\n    type: CHANGE_QUESTION_CODE_VALUE,\r\n    payload: val\r\n  }\r\n}\r\n\r\nexport const correctAnswerAction = (val) => {\r\n  return {\r\n    type: CHANGE_CORRECT_ANSWER_VALUE,\r\n    payload: val\r\n  }\r\n}\r\n\r\nexport const incorrectAnswer1Action = (val) => {\r\n  return {\r\n    type: CHANGE_INCORRECT_ANSWER1_VALUE,\r\n    payload: val\r\n  }\r\n}\r\n\r\nexport const incorrectAnswer2Action = (val) => {\r\n  return {\r\n    type: CHANGE_INCORRECT_ANSWER2_VALUE,\r\n    payload: val\r\n  }\r\n}\r\n\r\nexport const resetFormAction = () => {\r\n  return {\r\n    type: RESET_FORM,\r\n    payload: ''\r\n  }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Quiz from './components/qiuz/quiz';\nimport Admin from './components/admin/Admin';\n\n\n\nclass App extends Component {\n  render() {\n    return ( \n      <div className=\"App container\">\n        <Switch>\n          <Route path='/admin' component={Admin} />\n          <Route path='/' component={Quiz}/>\n          \n        </Switch>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_QUESTIONS, GET_QUESTIONS_ERROR, SET_ANSWER_VALUE, INCREASE_CORRECT_COUNT, INCREASE_QUESTION_NUMBER, SHOW_RESULTS, RESET_QUIZ} from '../actions/types';\r\n\r\nconst quizInitState = {\r\n  questions: [],\r\n  isAnswerCorrect: \"\",\r\n  correctAnswersCount: 0,\r\n  questionNumber: 0,\r\n  showResults: false\r\n}\r\n\r\n\r\nexport const quizReducer = (state = quizInitState, action) => {\r\n  switch(action.type) {\r\n    case GET_QUESTIONS:\r\n    return { \r\n      ...state,\r\n      questions: action.payload\r\n    }\r\n    case GET_QUESTIONS_ERROR: \r\n    return {\r\n      ...state,\r\n      getQuestionsErr: action.error\r\n    }\r\n    case SET_ANSWER_VALUE:\r\n    return {\r\n      ...state,\r\n      isAnswerCorrect: action.payload\r\n    }\r\n    case INCREASE_CORRECT_COUNT:\r\n    return {\r\n      ...state,\r\n      correctAnswersCount: state.correctAnswersCount + 1\r\n    }\r\n    case INCREASE_QUESTION_NUMBER:\r\n    return {\r\n      ...state,\r\n      questionNumber: state.questionNumber += 1\r\n    }\r\n    case SHOW_RESULTS:\r\n    return {\r\n      ...state,\r\n      showResults: action.payload\r\n    }\r\n\r\n    case RESET_QUIZ:\r\n    return quizInitState;\r\n\r\n    default: \r\n    return state;\r\n  }\r\n}","import { CHANGE_QUESTION_CODE_VALUE, CHANGE_CORRECT_ANSWER_VALUE, CHANGE_INCORRECT_ANSWER1_VALUE, CHANGE_INCORRECT_ANSWER2_VALUE, RESET_FORM, CHANGE_QUESTION_TEXT_VALUE } from '../actions/types';\r\n\r\nconst adminStartState = {\r\n    questionText: {name: \"Question Text\", value: ''}, \r\n    questionCode: {name: \"Question Code\", value: ''},\r\n    correctAnswer: {name: \"Correct Answer\", value: ''},\r\n    incorrectAnswer1: {name: \"Incorrect Answer #1\", value: ''},\r\n    incorrectAnswer2: {name: \"Incorrect Answer #2\", value: ''},\r\n}\r\n\r\nconst adminReducer = (state = adminStartState, action) => {\r\n  switch(action.type) {\r\n    case CHANGE_QUESTION_TEXT_VALUE: \r\n      return {\r\n        ...state,\r\n        questionText: action.payload\r\n      };\r\n    case CHANGE_QUESTION_CODE_VALUE: \r\n    return {\r\n      ...state,\r\n      questionCode: action.payload\r\n    }\r\n    case CHANGE_CORRECT_ANSWER_VALUE: \r\n    return {\r\n      ...state,\r\n      correctAnswer: action.payload\r\n    }\r\n    case CHANGE_INCORRECT_ANSWER1_VALUE: \r\n    return {\r\n      ...state,\r\n      incorrectAnswer1: action.payload\r\n    }\r\n    case CHANGE_INCORRECT_ANSWER2_VALUE: \r\n    return {\r\n      ...state,\r\n      incorrectAnswer2: action.payload\r\n    }\r\n    case RESET_FORM:\r\n    return adminStartState;\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default adminReducer;","import { combineReducers } from 'redux';\r\nimport { quizReducer } from './quizReducer';\r\nimport adminReducer from './adminReducer';\r\n \r\nconst rootReducer = combineReducers({\r\n    quiz: quizReducer,\r\n    admin: adminReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\nReactDOM.render(\n<Provider store={store}>\n  <HashRouter>\n    <App />\n  </HashRouter>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}